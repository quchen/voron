#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys

voron_user = "pi"
voron_address = "voron.local"

local_prefix = os.path.realpath(os.path.dirname(__file__))
voron_home = f"/home/{voron_user}"
files = [
    { "local": f"{local_prefix}/files/printer.cfg", "voron": f"{voron_home}/klipper_config/printer.cfg" },
    { "local": f"{local_prefix}/files/printer/button_macros.cfg", "voron": f"{voron_home}/klipper_config/printer/button_macros.cfg" },
    { "local": f"{local_prefix}/files/printer/leds.cfg", "voron": f"{voron_home}/klipper_config/printer/leds.cfg" },
    { "local": f"{local_prefix}/files/printer/slicer_macros.cfg", "voron": f"{voron_home}/klipper_config/printer/slicer_macros.cfg" },
    { "local": f"{local_prefix}/files/printer/TEST_SPEED.cfg", "voron": f"{voron_home}/klipper_config/printer/TEST_SPEED.cfg" },
    { "local": f"{local_prefix}/files/printer/utility_macros.cfg", "voron": f"{voron_home}/klipper_config/printer/utility_macros.cfg" },

    { "local": f"{local_prefix}/files/moonraker.conf", "voron": f"{voron_home}/klipper_config/moonraker.conf" },

    { "local": f"{local_prefix}/files/printer/klicky/klicky-bed-mesh-calibrate.cfg",    "voron": f"{voron_home}/klipper_config/printer/klicky/klicky-bed-mesh-calibrate.cfg" },
    { "local": f"{local_prefix}/files/printer/klicky/klicky-macros.cfg",                "voron": f"{voron_home}/klipper_config/printer/klicky/klicky-macros.cfg" },
    { "local": f"{local_prefix}/files/printer/klicky/klicky-probe.cfg",                 "voron": f"{voron_home}/klipper_config/printer/klicky/klicky-probe.cfg" },
    { "local": f"{local_prefix}/files/printer/klicky/klicky-quad-gantry-level.cfg",     "voron": f"{voron_home}/klipper_config/printer/klicky/klicky-quad-gantry-level.cfg" },
    { "local": f"{local_prefix}/files/printer/klicky/klicky-screws-tilt-calculate.cfg", "voron": f"{voron_home}/klipper_config/printer/klicky/klicky-screws-tilt-calculate.cfg" },
    { "local": f"{local_prefix}/files/printer/klicky/klicky-specific.cfg",              "voron": f"{voron_home}/klipper_config/printer/klicky/klicky-specific.cfg" },
    { "local": f"{local_prefix}/files/printer/klicky/klicky-variables.cfg",             "voron": f"{voron_home}/klipper_config/printer/klicky/klicky-variables.cfg" },
    { "local": f"{local_prefix}/files/printer/klicky/klicky-z-tilt-adjust.cfg",         "voron": f"{voron_home}/klipper_config/printer/klicky/klicky-z-tilt-adjust.cfg" },

    { "local": f"{local_prefix}/files/klipper_plugins/z_calibration/z_calibration.py", "voron": f"{voron_home}/klipper/klippy/extras/z_calibration.py" },
]

def command_line_args():
    parser = argparse.ArgumentParser(
        prog = os.path.basename(__file__),
        description = "Download and upload Voron config for centralized tracking in Git.")

    parser.add_argument(
        "action",
        choices=["upload", "download", "deploy"],
        help="Dpload/download only exchange files. Deploying is an upload with a firmware restart."
        )

    return parser.parse_args()

def scp(source, target):
    print(f"Copy [{source}] to [{target}]", file=sys.stderr)
    subprocess.run(["scp", "-r", source, target])

def ssh_voron_command(raw_command):
    """
    Run a raw shell command on the Voron. No escaping is happening, so be careful.
    """
    subprocess.run(["ssh", f"{voron_user}@{voron_address}", raw_command])

def restart_firmware():
    print("Restarting Klipper")
    ssh_voron_command("echo STEALTHBURNER_WHITE > /tmp/printer")
    ssh_voron_command("echo FIRMWARE_RESTART > /tmp/printer")

def copy_all(mode):
    for file_pair in files:
        match file_pair:
            case {"local": local, "voron": voron}:
                voron_scp = f"{voron_user}@{voron_address}:{voron}"
                if mode == "download":
                    scp(source=voron_scp, target=local)
                elif mode == "upload":
                    scp(source=local, target=voron_scp)
                elif mode == "deploy":
                    scp(source=local, target=voron_scp)
                else:
                    raise ValueError(f"mode can only be upload/downoad, but is {mode}")
            case _:
                raise ValueError(f"Bad file pair structure: {file_pair.keys()}. Check the config block of this script at {os.path.realpath(__file__)}!")
    if mode == "deploy":
        restart_firmware()

def main():
    args = command_line_args()
    copy_all(args.action)

if __name__ == '__main__':
    try:
        main()
    except ValueError as e:
        print(f"Error: {str(e)}")
