[gcode_macro _GEOMETRY_CALIBRATION]
description: Home, QGL
gcode:

    BED_MESH_CLEAR

    {% set xyz_are_homed = "x" in printer.toolhead.homed_axes and "y" in printer.toolhead.homed_axes and "z" in printer.toolhead.homed_axes %}
    {% if not xyz_are_homed %}
        M117 Home XYZ
        G28 # Home all
    {% else %}
        { action_respond_info("XYZ already homed") }
    {% endif %}


    NOZZLE_WIPE N=2

    {% set qgl_applied = printer.quad_gantry_level.applied %}
    {% set qgl_applied = False %}
    {% if not qgl_applied %}
        M117 Quad Gantry Level
        QUAD_GANTRY_LEVEL
        # Always home Z once more, since QGL changes Z plane
        M117 Re-home Z after QGL
        NOZZLE_WIPE N=2
        G28 Z
    {% else %}
        { action_respond_info("Quad Gantry Level already applied") }
    {% endif %}

[gcode_macro PRINT_START]
description: Called by the slicer before printing
gcode:
    {% set chamber_heating = params.CHAMBER and params.CHAMBER|int > 20 %}
    {% set tap_safe_extruder_temp = [(params.EXTRUDER|float), 145] | min %}

    M140 S{params.BED} # Set bed target temperature
    M104 S{tap_safe_extruder_temp} # Set extruder target temperature
    {% if chamber_heating %}
        # All fans on full throttle for more convective heating
        _NEVERMORE_START
        M106 S255
    {% endif %}

    _ELECTRONICS_FANS_START SPEED=0.25

    ; Temperature window is enough for now, the rest of the settling will happen during geometry calibration.
    M117 Wait extruder: ~{tap_safe_extruder_temp}°C
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={tap_safe_extruder_temp - 5} MAXIMUM={tap_safe_extruder_temp + 5}
    M117 Wait bed: ~{params.BED}°C
    TEMPERATURE_WAIT SENSOR="heater_bed" MINIMUM={params.BED|int - 5} MAXIMUM={params.BED|int + 5}

    M117 Geometry calibration
    _GEOMETRY_CALIBRATION

    BED_MESH_PROFILE LOAD=default

    ; Now do hard wait for temperatures
    M117 Wait extruder: ={params.EXTRUDER}°C
    M109 S{params.EXTRUDER}
    M117 Wait bed: ={params.BED}°C
    M190 S{params.BED}
    {% if chamber_heating %}
        M117 Wait chamber: >{params.CHAMBER}°C
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={params.CHAMBER}
        M107 # Print fan off again, chamber is on temperature
    {% endif %}

    NOZZLE_WIPE N=1

    # Move to the center of the bed to avoid the end stop screws. Even though
    # they’re <1mm high over the bed in my build, worst case is the slicer moves
    # the nozzle from the wipe over them at first layer height.
    G0 F4000 Z10
    G0 F4000 X125 Y125

    M117 ; Clear status message

[gcode_macro _NEVERMORE_START]
description: Remove scheduled nevermore turnoff and run it on full throttle.
gcode:
    UPDATE_DELAYED_GCODE ID=_NEVERMORE_STOP DURATION=0
    SET_FAN_SPEED FAN=nevermore SPEED=1

# Turn off nevermore after a delay: UPDATE_DELAYED_GCODE ID=_NEVERMORE_STOP DURATION=<delay[s]>
[delayed_gcode _NEVERMORE_STOP]
gcode:
    SET_FAN_SPEED FAN=nevermore SPEED=0

[gcode_macro NOZZLE_WIPE]
description: Wipe the nozzle on the decontaminator brush. N=<default: 1 times>.
gcode:
    {% set x_left = 30 %}
    {% set x_right = 85 %}
    {% set y_wipe = 258 %}
    {% set z_wipe = 2.5 %}
    {% set z_travel_offset = 10 %}
    {% set wipe_cycles = params.N | default(1) | int %}

    SAVE_GCODE_STATE NAME=_STATE_NOZZLE_WIPE

    G90 ; Abs0lute coordinates
    G1 F4000 X{x_right} Y{y_wipe} Z{z_wipe + z_travel_offset}
    G1 F4000 Z{z_wipe}
    {% for i in range(0, wipe_cycles) %}
        G1 F4000 X{x_left}
        G1 F4000 X{x_right}
    {% endfor %}
    G1 F4000 X{x_right} Z{z_wipe + z_travel_offset}

    RESTORE_GCODE_STATE NAME=_STATE_NOZZLE_WIPE

[gcode_macro _ELECTRONICS_FANS_START]
gcode:
    UPDATE_DELAYED_GCODE ID=_ELECTRONICS_FANS_STOP DURATION=0
    SET_FAN_SPEED FAN=raspi SPEED={params.SPEED | default(1) }
    SET_FAN_SPEED FAN=octopus SPEED={params.SPEED | default(1) }

[delayed_gcode _ELECTRONICS_FANS_STOP]
gcode:
    SET_FAN_SPEED FAN=raspi SPEED=0
    SET_FAN_SPEED FAN=octopus SPEED=0

[gcode_macro PRINT_END]
description: Called by the slicer after printing
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 50, th.axis_maximum.z]|min %}

    {% set chamber_heating = params.CHAMBER and params.CHAMBER|int > 20 %}
    {% if chamber_heating %}
        # Run Nevermore for another 15min to clean the air
        UPDATE_DELAYED_GCODE ID=_NEVERMORE_STOP DURATION={15 * 60}
    {% endif %}
    UPDATE_DELAYED_GCODE ID=_ELECTRONICS_FANS_STOP DURATION=60

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400           # Wait for all movement to finish
    G92 E0         # Reset extruder position to 0
    G1 E-2.0 F3600 # Retract filament

    TURN_OFF_HEATERS

    G90 # Absolute positioning
    G0 F4000 X{x_safe} Y{y_safe} Z{z_safe} # move nozzle to avoid stringing
    G0 F4000 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} # park nozzle in the back
    M107 # Turn off part cooling fan

    BED_MESH_CLEAR

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro M600]
description: Color change
gcode:
    {% set th = printer.toolhead %}
    {% set z_toolchange = [th.position.z + 10, 100]|max %}

    M400 # Wait for all movement to finish
    SAVE_GCODE_STATE NAME=STATE_M600

    M83 # Relative extruder
    G1 E-1 F3600 # Retract to avoid oozing

    G90 ; Abs0lute positioning
    G0 Z{z_toolchange} F8000
    G0 X125 Y0 F8000

    { action_respond_info("M600 ready; RESUME to resume") }
    PAUSE

    RESTORE_GCODE_STATE NAME=STATE_M600


[gcode_macro BEFORE_LAYER_CHANGE]
description: Called by the slicer before each layer change.
gcode:
    # Empty so far

[gcode_macro AFTER_LAYER_CHANGE]
description: Called by the slicer after each layer change.
gcode:
    # Empty so far
