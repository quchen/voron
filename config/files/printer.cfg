[include mainsail.cfg]
[include printer/leds.cfg]
[include printer/slicer_macros.cfg]
[include printer/button_macros.cfg]
[include printer/klicky/klicky-probe.cfg]

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_3D0035001050334636383920-if00
restart_method: command

[mcu raspi]
serial: /tmp/klipper_host_mcu

[board_pins]
mcu: mcu
aliases:
    motor0_enable=PF14, motor0_step=PF13, motor0_dir=PF12, motor0_uart=PC4,
    motor1_enable=PF15, motor1_step=PG0,  motor1_dir=PG1,  motor1_uart=PD11,
    motor2_enable=PG5,  motor2_step=PF11, motor2_dir=PG3,  motor2_uart=PC6,
    motor3_enable=PA0,  motor3_step=PG4,  motor3_dir=PC1,  motor3_uart=PC7,
    motor4_enable=PG2,  motor4_step=PF9,  motor4_dir=PF10, motor4_uart=PF2,
    motor5_enable=PF1,  motor5_step=PC13, motor5_dir=PF0,  motor5_uart=PE4,
    motor6_enable=PD4,  motor6_step=PE2,  motor6_dir=PE3,  motor6_uart=PE1,
    motor7_enable=PE0,  motor7_step=PE6,  motor7_dir=PA14, motor7_uart=PD3,

    endstop_x=PG6,
    endstop_y=PG9,
    endstop_z_sexbolt=PG10,
    endstop_klicky=PG11,

    temperature_bed=PF3, # TB
    temperature_nozzle=PF4, # T0
    temperature_chamber=PF5, # T1

    heater_nozzle=PA2, # HE0
    heater_bed=PA3, # HE1

    fan_part_cooling=PA8,
    fan_hotend=PE5,
    fan_raspi=PD13,
    fan_octopus=PD12,
    fan_nevermore=PD14,

    led_rgb_stealthburner=PB0,

[printer]
kinematics: corexy
max_velocity: 500
max_accel: 5000
max_z_velocity: 40
max_z_accel: 350

[stepper_x]
enable_pin:              !motor1_enable
step_pin:                motor1_step
dir_pin:                 motor1_dir
rotation_distance:       40
microsteps:              32
full_steps_per_rotation: 400
endstop_pin:             endstop_x
position_min:            0
position_endstop:        250
position_max:            250
homing_speed:            30
homing_retract_dist:     3

[tmc2209 stepper_x]
uart_pin: motor1_uart
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0 # TODO

[stepper_y]
enable_pin:              !motor0_enable
step_pin:                motor0_step
dir_pin:                 motor0_dir
rotation_distance:       40
microsteps:              32
full_steps_per_rotation: 400
endstop_pin:             endstop_y
position_min:            0
position_endstop:        257
position_max:            258
homing_speed:            30
homing_retract_dist:     3

[tmc2209 stepper_y]
uart_pin: motor0_uart
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0 # TODO

# Z0 stepper (front left)
[stepper_z]
enable_pin: !motor2_enable
step_pin: motor2_step
dir_pin: motor2_dir
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
endstop_pin: endstop_z_sexbolt
position_endstop: 0.039         # TODO
position_max: 220               # TODO
position_min: -1                # TODO
homing_speed: 5                 # TODO
homing_retract_dist: 3          # TODO

[tmc2209 stepper_z]
uart_pin: motor2_uart
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0 # TODO

# Z1 stepper (back left)
[stepper_z1]
enable_pin: !motor3_enable
step_pin: motor3_step
dir_pin: !motor3_dir
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z1]
uart_pin: motor3_uart
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0 # TODO

# Z2 stepper (back right)
[stepper_z2]
enable_pin: !motor4_enable
step_pin: motor4_step
dir_pin: motor4_dir
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z2]
uart_pin: motor4_uart
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0 # TODO

# Z3 stepper (front right)
[stepper_z3]
enable_pin: !motor5_enable
step_pin: motor5_step
dir_pin: !motor5_dir
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z3]
uart_pin: motor5_uart
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0 # TODO

[probe]
pin: endstop_klicky
z_offset: 4.8                # TODO
x_offset: 0                  # TODO
y_offset: 19.75              # TODO
speed: 20.0                  # TODO
samples: 3                   # TODO
samples_result: median       # TODO
sample_retract_dist: 3.0     # TODO
samples_tolerance: 0.01      # TODO
samples_tolerance_retries: 5 # TODO

[extruder]
enable_pin:        !motor6_enable
step_pin:          motor6_step
dir_pin:           !motor6_dir
microsteps:        32
nozzle_diameter:   0.400
filament_diameter: 1.75
heater_pin:        heater_nozzle
sensor_pin:        temperature_nozzle
sensor_type:       Generic 3950
control:           pid
pid_Kp:            24.476  # | Measured via PID_CALIBRATE HEATER=extruder TARGET=260
pid_Ki:            1.483   # |
pid_Kd:            100.965 # |
min_temp:          0
max_temp:          280
rotation_distance: 13.396270810234196
    # ^^^ Extruder calibration goes here. Scale this with
    # extrusion_requested/actually_extruded if actual extrusion doesn’t match
    # requested value.
gear_ratio:        50:17
min_extrude_temp:  200 # Don’t extrude below this temperature
max_extrude_only_distance: 200 # Max extrusion by a single GCode command
max_extrude_cross_section: 1 # So we can paint the nozzle primer line. TODO: Remove this once I have a nozzle brush
pressure_advance:  0.05
    # eSun ABS+ black 2022-11-09
    # - Slow Printing Speed = 300 mm/min
    # - Fast Printing Speed = 7200 mm/min
    # - Printing Acceleration = 2000 mm/s^2

[tmc2209 extruder]
uart_pin: motor6_uart
interpolate: false
run_current: 0.5
sense_resistor: 0.110
stealthchop_threshold: 0 # TODO

[heater_bed]
heater_pin:  heater_bed
sensor_pin:  temperature_bed
sensor_type: Generic 3950
max_power:   0.8
min_temp:    0
max_temp:    120
control:     pid
pid_Kp:      50.853  # | Measured via PID_CALIBRATE HEATER=heater_bed TARGET=60
pid_Ki:      1.395   # |
pid_Kd:      463.398 # |

[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: temperature_chamber
min_temp:   10
max_temp:   100

[fan]
pin:             fan_part_cooling
kick_start_time: 0.5
off_below:       0.1

[heater_fan hotend]
pin:             fan_hotend
max_power:       1.0
kick_start_time: 0.5
heater:          extruder
heater_temp:     50.0

[idle_timeout]
gcode:
    TURN_OFF_HEATERS
    M84 # turn off motors
timeout: 900 # 15m = 15*60s timeout

[quad_gantry_level]
speed:             250
horizontal_move_z: 15 # Bit higher so Klicky isn’t too close to the bed and makes me nervous
retries:           5
retry_tolerance:   0.0075
max_adjust:        10
# Corners of the gantry, not the bed! Hence the values way out of bounds of the
# print area
gantry_corners:
   -57,-24
   312, 301
# Probe points
points:
   5,  5
   5,  220
   250, 220
   250, 5

[bed_mesh]
speed:                    250
horizontal_move_z:        10
mesh_min:                 2, 2     # = 2mm safety margin
mesh_max:                 248, 248 # = (250-2)mm safety margin
probe_count:              5, 5
relative_reference_index: 12 # TODO

[bed_mesh default]
points =
    0.056250, 0.001250, -0.005000, 0.003750, 0.020000
    0.053750, -0.015000, 0.010000, -0.005000, 0.035000
    0.042500, -0.005000, 0.000000, 0.001250, 0.026250
    0.021250, -0.011250, -0.013750, 0.001250, 0.012500
    0.043750, 0.051250, 0.016250, 0.022500, 0.043750
version:    1
x_count:    5
y_count:    5
mesh_x_pps: 2
mesh_y_pps: 2
algo:       lagrange
tension:    0.2
min_x:      5.0
max_x:      250.0
min_y:      20.0
max_y:      240.0

[z_calibration]
nozzle_xy_position: 180, 258
switch_xy_position: 174, 239
bed_xy_position: 125, 125
switch_offset: 0.45 # TODO fine-tune this? Seems like a good standard value though
speed: 100
probing_first_fast: false # TODO True might be useful here
start_gcode: Attach_Probe
end_gcode: Dock_Probe
clearance: 20

# [temperature_fan raspi]
# pin:         fan_raspi
# sensor_type: temperature_host
# off_below:   0.2
# min_temp:    0
# max_temp:    80 # Raspi above 80°C sounds like a safe value for an error
# control:     pid # fan_pwm = max_power - (Kp*e + Ki*integral(e) - Kd*derivative(e)) / 255
# pid_Kp:      25   # | These constants are quite crappy and need some tuning against oscillations.
# pid_Ki:      0.01 # |    --> Changing fan from 0% to 100% takes around 45s for a noticeable difference. Set this to 45s = 1/(Ki[s]/255) => Ki ~ 1/10k?
# pid_Kd:      0    # |
# min_speed:   0.1
# target_temp: 40.0
# max_speed:   1.0

[fan_generic raspi]
pin: fan_raspi
off_below: 0.1

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp:    0
max_temp:    80

# [temperature_fan octopus]
# pin        : fan_octopus
# sensor_type: temperature_mcu
# sensor_mcu : mcu
# off_below  : 0.2
# min_temp   : 0
# max_temp   : 80 # Octopus above 80°C sounds like a safe value for an error
# control    : pid # fan_pwm = max_power - (Kp*e + Ki*integral(e) - Kd*derivative(e)) / 255
# pid_Kp     : 25   # | These constants are quite crappy and need some tuning against oscillations.
# pid_Ki     : 0.01 # |    --> Changing fan from 0% to 100% takes around 45s for a noticeable difference. Set this to 45s = 1/(Ki[s]/255) => Ki ~ 1/10k?
# pid_Kd     : 0    # |
# min_speed  : 0.1
# target_temp: 40.0
# max_speed  : 1.0

[fan_generic octopus]
pin: fan_octopus
off_below: 0.1

[temperature_sensor octopus]
sensor_type: temperature_mcu
min_temp:    0
max_temp:    80

[fan_generic nevermore]
pin: fan_nevermore
off_below: 0.25
kick_start_time: 1.0

[exclude_object]
