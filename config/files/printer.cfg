[include mainsail.cfg]
[include printer/button_macros.cfg]
[include printer/leds.cfg]
[include printer/slicer_macros.cfg]
[include printer/TEST_SPEED.cfg]
[include printer/utility_macros.cfg]

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_3D0035001050334636383920-if00
restart_method: command

[mcu raspi]
serial: /tmp/klipper_host_mcu

[board_pins]
mcu: mcu
aliases:
    motor0_enable=PF14, motor0_step=PF13, motor0_dir=PF12, motor0_uart=PC4,
    motor1_enable=PF15, motor1_step=PG0,  motor1_dir=PG1,  motor1_uart=PD11,
    motor2_enable=PG5,  motor2_step=PF11, motor2_dir=PG3,  motor2_uart=PC6,
    motor3_enable=PA0,  motor3_step=PG4,  motor3_dir=PC1,  motor3_uart=PC7,
    motor4_enable=PG2,  motor4_step=PF9,  motor4_dir=PF10, motor4_uart=PF2,
    motor5_enable=PF1,  motor5_step=PC13, motor5_dir=PF0,  motor5_uart=PE4,
    motor6_enable=PD4,  motor6_step=PE2,  motor6_dir=PE3,  motor6_uart=PE1,
    motor7_enable=PE0,  motor7_step=PE6,  motor7_dir=PA14, motor7_uart=PD3,

    endstop_x=PG6,
    endstop_y=PG9,
    endstop_tap=PG11,

    temperature_bed=PF3, # TB
    temperature_nozzle=PF4, # T0
    temperature_chamber=PF5, # T1

    heater_nozzle=PA2, # HE0
    heater_bed=PA3, # HE1

    fan_part_cooling=PA8,
    fan_hotend=PE5,
    fan_octopus=PD12,
    fan_raspi=PD13,
    fan_nevermore=PD14,

    led_rgb_stealthburner=PB0,
    led_chamber_illumination=PB10, # HE2

    # EXP1 header
    EXP1_1=PE8,   EXP1_2=PE7,
    EXP1_3=PE9,   EXP1_4=PE10,
    EXP1_5=PE12,  EXP1_6=PE13, # Slot in the socket here
    EXP1_7=PE14,  EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6,   EXP2_2=PA5,
    EXP2_3=PB1,   EXP2_4=PA4,
    EXP2_5=PB2,   EXP2_6=PA7, # Slot in the socket here
    EXP2_7=PC15,  EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>,

[printer]
kinematics:     corexy
max_velocity:   500
max_accel:      10000
max_z_velocity: 40
max_z_accel:    350

# Back left
[stepper_x]
enable_pin:              !motor1_enable
step_pin:                motor1_step
dir_pin:                 motor1_dir
rotation_distance:       40
microsteps:              32
full_steps_per_rotation: 400
endstop_pin:             endstop_x
position_min:            0
position_endstop:        250
position_max:            250
homing_speed:            100
second_homing_speed:     25
homing_retract_dist:     5

[tmc2209 stepper_x]
uart_pin:              motor1_uart
interpolate:           false
run_current:           0.8
sense_resistor:        0.110
stealthchop_threshold: 0

# Back right
[stepper_y]
enable_pin:              !motor0_enable
step_pin:                motor0_step
dir_pin:                 motor0_dir
rotation_distance:       40
microsteps:              32
full_steps_per_rotation: 400
endstop_pin:             endstop_y
position_min:            0
position_endstop:        257
position_max:            258
homing_speed:            100
second_homing_speed:     25
homing_retract_dist:     5

[tmc2209 stepper_y]
uart_pin:              motor0_uart
interpolate:           false
run_current:           0.8
sense_resistor:        0.110
stealthchop_threshold: 0

# Z0 stepper (front left)
[stepper_z]
enable_pin:          !motor2_enable
step_pin:            motor2_step
dir_pin:             motor2_dir
rotation_distance:   40
gear_ratio:          80:16
microsteps:          32
endstop_pin:         probe:z_virtual_endstop
position_max:        220
position_min:        -2 # Really bad gantry adjustment might require lower neg numbers
homing_speed:        25
second_homing_speed: 5
homing_retract_dist: 5

[tmc2209 stepper_z]
uart_pin:              motor2_uart
interpolate:           false
run_current:           0.8
sense_resistor:        0.110
stealthchop_threshold: 0

# Z1 stepper (back left)
[stepper_z1]
enable_pin:        !motor3_enable
step_pin:          motor3_step
dir_pin:           !motor3_dir
rotation_distance: 40
gear_ratio:        80:16
microsteps:        32

[tmc2209 stepper_z1]
uart_pin:              motor3_uart
interpolate:           false
run_current:           0.8
sense_resistor:        0.110
stealthchop_threshold: 0

# Z2 stepper (back right)
[stepper_z2]
enable_pin:        !motor4_enable
step_pin:          motor4_step
dir_pin:           motor4_dir
rotation_distance: 40
gear_ratio:        80:16
microsteps:        32

[tmc2209 stepper_z2]
uart_pin:              motor4_uart
interpolate:           false
run_current:           0.8
sense_resistor:        0.110
stealthchop_threshold: 0

# Z3 stepper (front right)
[stepper_z3]
enable_pin:        !motor5_enable
step_pin:          motor5_step
dir_pin:           !motor5_dir
rotation_distance: 40
gear_ratio:        80:16
microsteps:        32

[tmc2209 stepper_z3]
uart_pin:              motor5_uart
interpolate:           false
run_current:           0.8
sense_resistor:        0.110
stealthchop_threshold: 0

[probe]
pin: endstop_tap
z_offset: -0.945
x_offset: 0
y_offset: 0
speed: 20 # mm/s probing speed
activate_gcode:
    {% set PROBE_MAX_TEMP = 150 %}
    {% set CURRENT_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_MAX_TEMP %}
        { action_respond_info('Extruder target temperature of %.1f°C is too high, lowering to %.1f°C' % (TARGET_TEMP, PROBE_MAX_TEMP)) }
        M104 S{PROBE_MAX_TEMP - 5} # Set temp, wait is done at the end
    {% elif CURRENT_TEMP > PROBE_MAX_TEMP %}
        { action_respond_info('Extruder temperature %.1f°C is too high, wait for ~%.1f°C' % (CURRENT_TEMP, PROBE_MAX_TEMP)) }
    {% endif %}
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={PROBE_MAX_TEMP}

[safe_z_home]
home_xy_position: 125, 125
speed:            100
z_hop:            10

[extruder]
enable_pin:        !motor6_enable
step_pin:          motor6_step
dir_pin:           !motor6_dir
microsteps:        32
nozzle_diameter:   0.4
filament_diameter: 1.75
heater_pin:        heater_nozzle
sensor_pin:        temperature_nozzle
sensor_type:       Generic 3950
control:           pid
pid_Kp:            24.476  # | Measured via PID_CALIBRATE HEATER=extruder TARGET=260
pid_Ki:            1.483   # |
pid_Kd:            100.965 # |
min_temp:          0
max_temp:          280
rotation_distance: 13.396270810234196
    # ^^^ Extruder calibration goes here. Scale this with
    # extrusion_requested/actually_extruded if actual extrusion doesn’t match
    # requested value.
gear_ratio:        50:17
min_extrude_temp:  200 # Don’t extrude below this temperature
max_extrude_only_distance: 200 # Max extrusion by a single GCode command
max_extrude_cross_section: 1 # So we can paint the nozzle primer line. TODO: Remove this once I have a nozzle brush
pressure_advance:  0.03
pwm_cycle_time: 0.01 # Default is 0.1, but leads to flickering chamber LEDs

[tmc2209 extruder]
uart_pin:              motor6_uart
interpolate:           false
run_current:           0.5
sense_resistor:        0.110
stealthchop_threshold: 0

[heater_bed]
heater_pin:  heater_bed
sensor_pin:  temperature_bed
sensor_type: Generic 3950
max_power:   0.8
min_temp:    0
max_temp:    120
control:     pid
pid_Kp:      50.853  # | Measured via PID_CALIBRATE HEATER=heater_bed TARGET=60
pid_Ki:      1.395   # |
pid_Kd:      463.398 # |

[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: temperature_chamber
min_temp:   10
max_temp:   100

[fan]
pin:             fan_part_cooling
kick_start_time: 1
off_below:       0.1

[heater_fan hotend]
pin:             fan_hotend
max_power:       1.0
kick_start_time: 0.5
heater:          extruder
heater_temp:     50
shutdown_speed:  1

[idle_timeout]
gcode:
    TURN_OFF_HEATERS
    M84 # turn off motors
timeout: 1800 # 30m = 30*60s timeout

[quad_gantry_level]
speed:             250 # mm/s
horizontal_move_z: 10
retries:           5
retry_tolerance:   0.0075
max_adjust:        10
# Corners of the gantry, not the bed! Hence the values way out of bounds of the
# print area
gantry_corners:
   -57,-24
   312, 301
# Probe points
points:
   5,  5
   5,  245
   245, 245
   245, 5

[bed_mesh]
speed:                    250
horizontal_move_z:        10
mesh_min:                 5, 5
mesh_max:                 245, 245
probe_count:              5, 5
relative_reference_index: 12

[bed_mesh default]
version = 1
points =
	  0.031250, 0.020000, 0.025000, 0.028750, 0.033750
	  0.063750, 0.015000, 0.023750, 0.008750, 0.021250
	  0.036250, -0.002500, 0.000000, -0.003750, 0.001250
	  0.018750, -0.020000, -0.001250, -0.008750, 0.001250
	  0.020000, 0.001250, 0.021250, 0.018750, 0.035000
x_count    = 5
y_count    = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo       = lagrange
tension    = 0.2
min_x      = 5.0
max_x      = 245.0
min_y      = 20.0
max_y      = 230.0

# [temperature_fan raspi]
# pin:         fan_raspi
# sensor_type: temperature_host
# off_below:   0.1
# min_temp:    0
# max_temp:    80 # Raspi above 80°C sounds like a safe value for an error
# control:     watermark
# max_delta: 5
# # control: pid # fan_pwm = max_power - (Kp*e + Ki*integral(e) - Kd*derivative(e)) / 255
# # pid_Kp:      10   # | These constants are quite crappy and need some tuning against oscillations.
# # pid_Ki:      0.01 # |    --> Changing fan from 0% to 100% takes around 45s for a noticeable difference. Set this to 45s = 1/(Ki[s]/255) => Ki ~ 1/10k?
# # pid_Kd:      0    # |
# min_speed:   0.1
# target_temp: 45.0
# max_speed:   1
# kick_start_time: 1.0

[fan_generic raspi]
pin:       fan_raspi
off_below: 0.1

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp:    0
max_temp:    80

# [temperature_fan octopus]
# pin:         fan_octopus
# sensor_type: temperature_mcu
# sensor_mcu:  mcu
# off_below:   0.1
# min_temp:    0
# max_temp:    80 # Octopus above 80°C sounds like a safe value for an error
# control:     watermark
# max_delta: 5
# # control: pid # fan_pwm = max_power - (Kp*e + Ki*integral(e) - Kd*derivative(e)) / 255
# # pid_Kp:      10   # | These constants are quite crappy and need some tuning against oscillations.
# # pid_Ki:      0.01 # |    --> Changing fan from 0% to 100% takes around 45s for a noticeable difference. Set this to 45s = 1/(Ki[s]/255) => Ki ~ 1/10k?
# # pid_Kd:      0    # |
# min_speed:   0.1
# target_temp: 45.0
# max_speed:   1
# kick_start_time: 1.0

[fan_generic octopus]
pin: fan_octopus
off_below: 0.1

[temperature_sensor octopus]
sensor_type: temperature_mcu
min_temp:    0
max_temp:    80

[fan_generic nevermore]
pin: fan_nevermore
off_below: 0.25
kick_start_time: 1.0

[exclude_object]

[gcode_arcs]
resolution: 1.0

[display]
#  mini12864 LCD Display
lcd_type:              uc1701
cs_pin:                EXP1_3
a0_pin:                EXP1_4
rst_pin:               EXP1_5
encoder_pins:          ^EXP2_5, ^EXP2_3
click_pin:             ^!EXP1_2
contrast:              63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[neopixel display]
pin:           EXP1_6
chain_count:   3
initial_RED:   0.1
initial_GREEN: 0.5
initial_BLUE:  0.0
color_order:   RGB

[adxl345]
cs_pin: raspi:None # Yes, None, not the Raspi pin CS is connected to (GPIO08/SPI0_CE0_N in my case).
axes_map: y, z, x # Because of my mounting: printer(x,y,z) = sensor(y,z,x)

[resonance_tester]
accel_chip: adxl345
probe_points: # x, y, z probe points
    125, 125, 25
accel_per_hz: 75 # 25: barely noticeable. 50: electric toothbrush. 75: Klipper default. Big toothbrush.
hz_per_sec: 1

[input_shaper]
shaper_freq_x: 48.8
shaper_type_x: mzv
shaper_freq_y: 48.6
shaper_type_y: 2hump_ei
